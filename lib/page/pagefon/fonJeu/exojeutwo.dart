// Import du package Flutter pour cr√©er les widgets
import 'package:flutter/material.dart';
// Import de sqflite pour g√©rer la base de donn√©es SQLite
import 'package:sqflite/sqflite.dart';
// Import de path pour construire des chemins compatibles avec le syst√®me
import 'package:path/path.dart' as p;

// D√©claration du widget Stateful pour le niveau 2 (QCM)
class ExoJeuTwo extends StatefulWidget {
  final int level; // Niveau pass√© lors de la cr√©ation du widget
  ExoJeuTwo({required this.level}); // Constructeur obligatoire

  @override
  _ExoJeuTwoState createState() => _ExoJeuTwoState(); // Cr√©e l'√©tat associ√©
}

// Classe qui g√®re l'√©tat de ExoJeuTwo
class _ExoJeuTwoState extends State<ExoJeuTwo> {
  int score = 0; // Score du joueur
  bool isFinished = false; // Bool√©en pour savoir si le niveau est termin√©
  Map<int, String?> selectedAnswers = {}; // R√©ponses choisies par question

  // Liste des questions avec options et r√©ponse correcte
  final List<Map<String, dynamic>> questions = [
    {
      "question": "Comment dit-on 'Bonjour' en fon ?", // Question
      "options": ["a f…îÃÄn √†", "ma yi bo wa", "Mawu"], // Options disponibles
      "answer": "a f…îÃÄn √†" // R√©ponse correcte
    },
    {
      "question": "Que veut dire 'Ag…î' ?",
      "options": ["Maison", "Pain", "Eau"],
      "answer": "Maison"
    },
  ];

  // Fonction pour sauvegarder le score dans la base SQLite
  Future<void> _saveScore() async {
    final dbPath = await getDatabasesPath(); // Chemin de la base de donn√©es
    final path = p.join(dbPath, 'scores.db'); // Chemin complet vers scores.db
    final db = await openDatabase(path, version: 1, onCreate: (db, version) {
      // Cr√©ation de la table scores si elle n'existe pas
      return db.execute('''
        CREATE TABLE IF NOT EXISTS scores (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          score INTEGER,
          level INTEGER,
          date TEXT
        )
      ''');
    });

    // Insertion du score actuel dans la table
    await db.insert('scores', {
      'score': score,
      'level': widget.level,
      'date': DateTime.now().toIso8601String(), // Date et heure actuelle
    });
  }

  // Fonction pour v√©rifier les r√©ponses et calculer le score
  void checkAnswers() {
    int newScore = 0; // Score temporaire
    for (int i = 0; i < questions.length; i++) {
      // Compare la r√©ponse choisie avec la r√©ponse correcte
      if (selectedAnswers[i] == questions[i]["answer"]) {
        newScore++; // Incr√©mente si correct
      }
    }
    setState(() {
      score = newScore; // Met √† jour le score
      isFinished = true; // Marque le niveau comme termin√©
    });
    _saveScore(); // Sauvegarde le score dans SQLite

    bool isSuccess = score == questions.length; // V√©rifie si toutes les r√©ponses sont correctes

    // Affiche une bo√Æte de dialogue pour le r√©sultat
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("Niveau ${widget.level} termin√©"), // Titre du dialog
        content: Column(
          mainAxisSize: MainAxisSize.min, // Colonne prend juste la place n√©cessaire
          children: [
            Image.asset(
              isSuccess
                  ? "assets/images/success.gif" // Image succ√®s si r√©ussite
                  : "assets/images/fail.gif", // Image √©chec sinon
              height: 120,
            ),
            SizedBox(height: 12), // Espace vertical
            Text("Score : $score/${questions.length}"), // Affiche le score
          ],
        ),
        actions: [
          if (isSuccess) // Si r√©ussite, bouton pour d√©bloquer le niveau suivant
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Ferme le dialog
                Navigator.of(context).pop(widget.level + 1); // Retour au menu et d√©bloque suivant
              },
              child: Text("üëâ Retour au menu"),
            ),
          // Bouton pour recommencer le niveau
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Ferme le dialog
              setState(() {
                score = 0; // R√©initialise le score
                isFinished = false; // R√©initialise l'√©tat du niveau
                selectedAnswers.clear(); // Vide les r√©ponses s√©lectionn√©es
              });
            },
            child: Text("üîÑ Recommencer"),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Niveau ${widget.level} - QCM")), // Barre d'app
      body: Padding(
        padding: const EdgeInsets.all(16.0), // Padding autour du contenu
        child: Column(
          children: [
            Expanded(
              child: ListView.builder( // Liste des questions
                itemCount: questions.length, // Nombre de questions
                itemBuilder: (context, index) {
                  final q = questions[index]; // Question courante
                  return Card(
                    margin: EdgeInsets.symmetric(vertical: 8), // Marge verticale
                    child: Padding(
                      padding: const EdgeInsets.all(12.0), // Padding interne
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(q["question"], // Affiche la question
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.bold)),
                          ...q["options"].map<Widget>((opt) { // Boucle sur les options
                            return RadioListTile<String>(
                              title: Text(opt), // Texte de l'option
                              value: opt, // Valeur associ√©e
                              groupValue: selectedAnswers[index], // Valeur s√©lectionn√©e
                              onChanged: (value) {
                                if (!isFinished) { // Si le niveau n'est pas termin√©
                                  setState(() {
                                    selectedAnswers[index] = value; // Met √† jour la s√©lection
                                  });
                                }
                              },
                            );
                          }).toList(),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
            if (!isFinished) // Bouton seulement si le niveau n'est pas termin√©
              ElevatedButton(
                onPressed: selectedAnswers.length == questions.length
                    ? checkAnswers // Active si toutes les questions ont une r√©ponse
                    : null,
                child: Text("Valider mes r√©ponses"), // Texte du bouton
              ),
          ],
        ),
      ),
    );
  }
}
